scalar Date
scalar DateTime

enum Title {
    MD,
    PT,
    DC,
    MT
}
enum AppointmentStatus {
    UPCOMING,
    ATTENDED,
    DID_NOT_ATTEND,
    CANCELLED,
    RESCHEDULED
}
input DocInput {
    firstName: String
    lastName: String
    title: Title
    specialty: String
}

input PatientInput {
    firstName: String!
    lastName: String!
    email: String!
    phone: String!
    dob: Date!
}

type Doc {
    id: ID!
    firstName: String!
    lastName: String!
    title: Title!
    specialty: String!
}

type Patient {
    id: ID!
    firstName: String!
    lastName: String!
    email: String!
    phone: String!
    dob: String!
    docs: [Doc]
}

type Appointment {
    id: ID!
    docId: ID!
    patientId: ID!
    scheduledDate: DateTime!
    appointmentStatus: AppointmentStatus!
    notes: String
}

type Mutation {
    #Update doctor's personal information
    updateDoctorInfo(id: ID!, input: DocInput!): Doc!
    #Creat a new doctor using the DocInput type
    createNewDoctor(input: DocInput!): Doc!

    createNewPatient(input: PatientInput!): Patient!

    addDoctorToPatient(patientId: ID!, doctorId: ID!): Patient!
}

type Query {
    #Retrieve all doctors/practitioners at the practice
    retrieveAllDoctors: [Doc!]

    #Retrieve specific doctor/practitioner by their ID
    retrieveDoctorById(id: ID): Doc

    #Retrieve all patients at the practice
    retrieveAllPatientsInfo: [Patient!]

    #Retrieve specific patient's information
    retrievePatientInfoById(id: ID): Patient

    #Retrieve all appointments
    retrieveAllAppointments: [Appointment!]

    #Retrieve appointmet by its ID
    retrieveAppointmentById(id: ID): Appointment

    #Retrieve appointments by its status (enum type)
    retrieveAppointmentByType(appointmentStatus: AppointmentStatus): [Appointment]
}

